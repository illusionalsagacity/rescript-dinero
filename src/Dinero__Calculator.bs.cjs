// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Int53 = require("./Int53.bs.cjs");

function int32Calculator_add(a, b) {
  return a + b | 0;
}

function int32Calculator_compare(a, b) {
  if (a === b) {
    return 0;
  } else if (a > b) {
    return 1;
  } else {
    return -1;
  }
}

function int32Calculator_decrement(a) {
  return a - 1 | 0;
}

var int32Calculator_integerDivide = (function (a, b) { return Math.trunc(a / b); });

function int32Calculator_increment(a) {
  return a + 1 | 0;
}

var int32Calculator_modulo = (function (a, b) { return a % b; });

function int32Calculator_multiply(a, b) {
  return Math.imul(a, b);
}

function int32Calculator_power(a, b) {
  return Math.pow(a, b);
}

function int32Calculator_subtract(a, b) {
  return a - b | 0;
}

function int32Calculator_zero(param) {
  return 0;
}

var int32Calculator = {
  add: int32Calculator_add,
  compare: int32Calculator_compare,
  decrement: int32Calculator_decrement,
  integerDivide: int32Calculator_integerDivide,
  increment: int32Calculator_increment,
  modulo: int32Calculator_modulo,
  multiply: int32Calculator_multiply,
  power: int32Calculator_power,
  subtract: int32Calculator_subtract,
  zero: int32Calculator_zero
};

function int53Calculator_add(prim0, prim1) {
  return prim0 + prim1;
}

function int53Calculator_compare(a, b) {
  if (Int53.eq(a, b)) {
    return 0;
  } else if (Int53.greaterThan(a, b)) {
    return 1;
  } else {
    return -1;
  }
}

function int53Calculator_decrement(__x) {
  return __x - 1;
}

var int53Calculator_integerDivide = (function (a, b) { return Math.trunc(a / b); });

function int53Calculator_increment(__x) {
  return __x + 1;
}

var int53Calculator_modulo = (function (a, b) { return a % b; });

function int53Calculator_multiply(prim0, prim1) {
  return prim0 * prim1;
}

function int53Calculator_subtract(prim0, prim1) {
  return prim0 - prim1;
}

function int53Calculator_zero(param) {
  return 0;
}

var int53Calculator = {
  add: int53Calculator_add,
  compare: int53Calculator_compare,
  decrement: int53Calculator_decrement,
  integerDivide: int53Calculator_integerDivide,
  increment: int53Calculator_increment,
  modulo: int53Calculator_modulo,
  multiply: int53Calculator_multiply,
  power: Int53.exponent,
  subtract: int53Calculator_subtract,
  zero: int53Calculator_zero
};

exports.int32Calculator = int32Calculator;
exports.int53Calculator = int53Calculator;
/* No side effect */
