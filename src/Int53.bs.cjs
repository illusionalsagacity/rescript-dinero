// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Int = require("@rescript/core/src/Core__Int.bs.cjs");
var Core__Option = require("@rescript/core/src/Core__Option.bs.cjs");

function fromFloat(value) {
  if (isFinite(value)) {
    if (value > Number.MAX_SAFE_INTEGER) {
      return {
              TAG: /* Error */1,
              _0: /* ValueTooLarge */1
            };
    } else if (value < Number.MIN_SAFE_INTEGER) {
      return {
              TAG: /* Error */1,
              _0: /* ValueTooSmall */2
            };
    } else {
      return {
              TAG: /* Ok */0,
              _0: Math.trunc(value)
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: /* NotFiniteNumber */0
          };
  }
}

function fromString(value) {
  return Core__Option.map(Core__Int.fromString(10, value), (function (prim) {
                return prim;
              }));
}

var eq = (function (a, b) { return a == b; });

var greaterThan = (function (a, b) { return a > b; });

var greaterThanOrEqual = (function (a, b) { return a >= b; });

var lessThan = (function (a, b) { return a < b; });

var lessThanOrEqual = (function (a, b) { return a <= b; });

var mod = (function (a, b) { return a % b; });

function $plus(prim0, prim1) {
  return prim0 + prim1;
}

function $neg(prim0, prim1) {
  return prim0 - prim1;
}

function $star(prim0, prim1) {
  return prim0 * prim1;
}

function $slash(prim0, prim1) {
  return prim0 / prim1;
}

function $star$star(prim0, prim1) {
  return Math.pow(prim0, prim1);
}

var Operators = {
  $eq$eq: eq,
  $great: greaterThan,
  $great$eq: greaterThanOrEqual,
  $less: lessThan,
  $less$eq: lessThanOrEqual,
  $plus: $plus,
  $neg: $neg,
  $percent: mod,
  $star: $star,
  $slash: $slash,
  $star$star: $star$star
};

function exponent(prim0, prim1) {
  return Math.pow(prim0, prim1);
}

exports.fromFloat = fromFloat;
exports.fromString = fromString;
exports.eq = eq;
exports.greaterThan = greaterThan;
exports.greaterThanOrEqual = greaterThanOrEqual;
exports.lessThan = lessThan;
exports.lessThanOrEqual = lessThanOrEqual;
exports.mod = mod;
exports.exponent = exponent;
exports.Operators = Operators;
/* No side effect */
